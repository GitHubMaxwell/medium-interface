/*
    flexibility models with css grid
    min-content
    max-content
    fr units
    - takes space that available and splits them up equally per each item that has
    minmax()
    - used to define columns and layouts
    using grid and flexbox together
    - container being grid and children flex
*/
* {
    box-sizing: border-box;
}

main, h1, h2, span, p, .price, .location {
    background: #F5F1E1;
}

main {
    display:grid;
    grid-template-columns: max-content max-content minmax(min-content, 1fr) min-content;
    grid-template-rows: 12vw auto auto auto auto;
    // background: #F5F1E1;
    margin: 10rem 2rem;
    padding: 1rem;
    min-width: 40rem;
    color: #F9423A;
    // border: 5px solid black;
    font-family: Avenir, 'Futura W01', helvetica, san-serif;
}

h1 {
    grid-row: 2 / 3;
    grid-column: 1 / 3;
}
h2 {
    grid-row: 3 / 4;
    display: contents;
}
h2 span:nth-child(1) {
        grid-column: 2 / 3;
        align-self: end;
        font-size: 1.15rem;
        // color: green;
        border:none;
    }
h2 span:nth-child(2) {
        grid-column: 3 / 5;
        align-self: end;
        font-size: calc(2rem + 2vw);
        color: black;
        border:none;

    }
p {
    grid-row: 4 / 5;
    grid-column: 2 / 5;
    font-size: 0.85rem;
}
.price {
    grid-row: 5 / 6;
    grid-column: 2 / 3;
    font-weight: bold;
    font-size: 1.5rem;
}
.location {
    grid-row: 5 / 6;
    grid-column: 4 / 5;
    border: 5px solid black;
    padding: 0.8rem;
    font-weight: bold;
    font-size: 0.85rem;
}
.box {
    grid-row:1/2;
    grid-column:1/3;
    background: black;
}